import requests
import pandas as pd

class ImpactConnector:
	"""
	This is an API connector class for Impact Advertiser API
	https://developer.impact.com/default/documentation/Rest-Adv-v8
	Supported API Calls (more coming):
	- List Actions
	- List Campaigns
	- List Reports
	- Run Report
	"""
	def __init__(self, accountSID, authToken):
		"""
		The init method authenticates the Impact Connector class and requires Account SID and Auth Token to create a session.
		These details can be found at Impact Advertiser portal: app.impact.com under
		Settings -> Technical API
		:param accountSID: Account SID for API Client
		:param authToken: Auth Token for API Client
		"""
		self.accountSID = accountSID
		self.authToken = authToken
		self.session = requests.Session()
		self.session.auth = (self.accountSID, self.authToken)
		self.auth = self.session.post('https://api.impact.com')

	def __str__(self):
		return f'Impact Connector Class for Advertiser with id {self.accountSID}'

	def __del__(self):
		if self.session:
			self.session.close()

	def __getData(self, url, dataColumn):
		"""
		A private method to run API call
		:param url: url for API call generated by public method
		:param dataColumn: data column name to look for in the result of API call
		:return: pd.DataFrame() with result data
		"""
		result = pd.DataFrame()
		while url != '':
			response = self.session.get('https://api.impact.com' + url)
			if response.status_code != 200:
				raise Exception(response.text.replace('\n', ': '))
			response = response.content.decode('utf-8')
			data = pd.read_json(response, typ='series')
			url = data['@nextpageuri']
			for record in data[dataColumn]:
				result = result.append(record, ignore_index=True, )
		return result

	def advertiser_ListActions(self, campaignId, **kwargs):
		"""
		Retrieves a list of all your actions
		:param campaignId: str required. Return actions for a specific campaign
		:param kwargs:
			STATE: Only return actions with a specific state. Available values : ['APPROVED', 'REVERSED', 'PENDING']
			Locking_Date_Start: str from date, format = '%Y-%m-%d'. Inclusive lower limit for the locking date of the action
			Locking_Date_End: str from date, format = '%Y-%m-%d'. Exclusive upper limit for the locking date of the action
			Action_Date_Start: str from date, format = '%Y-%m-%d'. Inclusive lower limit for the date the action took place
			Action_Date_End: str from date, format = '%Y-%m-%d'. Exclusive upper limit for the date the action took place
			Start_Date: str from date, format = '%Y-%m-%d'. Inclusive lower limit for the date the action was updated
			End_Date: str from date, format = '%Y-%m-%d'. Exclusive upper limit for the date the action was updated
		:return:
		"""
		url = f'/Advertisers/{self.accountSID}/Actions.json?CampaignId={campaignId}&'
		for key, value in kwargs.items():
			url +=f'{key}={value}&'
		return self.__getData(url, 'Actions')

	def advertiser_ListCampaigns(self, **kwargs):
		"""
		Retrieves a list of campaigns
		:param kwargs:
			NAME = str (default None) # Returns campaigns with name containing this value
			STATE = str (default ALL) # Returns campaigns in specific states ['SETUP', 'SETUP_COMPLETED', 'AWAITING_REVIEW', 'REJECTED', 'ACTIVE', 'CANCELLED', 'DELINQUENT', 'DEACTIVATED', 'CLOSED']
		:return: pd.DataFrame() with result data
		"""
		url = f'/Advertisers/{self.accountSID}/Campaigns.json?'
		for key, value in kwargs.items():
			url += f'{key}={value}&'
		return self.__getData(url, 'Campaigns')

	def advertiser_ListReports(self):
		"""
		Retrieves a list of all reports
		:return: pd.DataFrame() with result data
		"""
		url = f'/Advertisers/{self.accountSID}/Reports.json'
		return self.__getData(url, 'Reports')

	def advertiser_RunReport(self, reportId, **kwargs):
		"""
		Runs a report
		:param reportId: str required. Id for the specific Report
		:param kwargs:
			SUBAID: int. The campaign id to filter on.
		:return: pd.DataFrame() with result data
		"""
		url = f'/Advertisers/{self.accountSID}/Reports/{reportId}.json?'
		# Includes all types of actions
		url += 'SUPERSTATUS_MS=APPROVED&SUPERSTATUS_MS=NA&SUPERSTATUS_MS=PENDING&SUPERSTATUS_MS=REVERSED&'
		for key, value in kwargs.items():
			url += f'{key}={value}&'
		return self.__getData(url, 'Records')
